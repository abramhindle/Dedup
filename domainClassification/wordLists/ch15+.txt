PART IV – Advanced Development

Subscribe to updates at http://commonsware.com

Special Creative Commons BY-SA 3.0 License Edition

Subscribe to updates at http://commonsware.com

Special Creative Commons BY-SA 3.0 License Edition

CHAPTER 15

Testing Your Patience

Presumably, you will want to test your code, beyond just playing around 
with it yourself by hand.

To that end, Android includes the JUnit test framework in the SDK, along 
with special test classes that  will  help you  build test  cases that  exercise 
Android components, like activities and services. Even better, Android 1.5 
has "gone the extra mile" and can pre-generate your test harness for you, to 
make it easier for you to add in your own tests.

This  chapter assumes  you   have  some  familiarity  with   JUnit, though  you 
certainly do not need to be an expert. You can learn more about JUnit at the 
JUnit site, from various books, and from the JUnit Yahoo forum.

You Get What They Give You

When  you  create  a   project   in   Android   1.5   using  android  create   project, 
Android  automatically  creates  a   new  tests/  directory   inside   the   project 
directory.   If   you   look   in   there,  you  will   see   a   complete   set   of   Android 
project artifacts: manifest, source directories, resources, etc. This is actually 
a   test   project,   designed   to   partner   with   the   main   project   to   create   a 
complete testing solution.

In fact, that test project is all ready to go, other than not having any tests of 
significance. If you build and install your main project (onto an emulator or 

Subscribe to updates at http://commonsware.com

Special Creative Commons BY-SA 3.0 License Edition

225

Testing Your Patience

device), then build and install the test project, you will be able to run unit 
tests.

Android   ships   with   a   very   rudimentary   JUnit   runner,   called 
InstrumentationTestRunner.   Since   this   class   resides   in   the   Android 
environment (emulator or device), you need to invoke the runner to run 
your  tests  on  the  emulator or  device  itself.  To  do this, you  can run the 
following command from a console:

adb shell am instrument -w 
com.commonsware.android.database.tests/android.test.InstrumentationTestRunner

In this case, we are instructing Android to run all the available test cases for 
the  com.commonsware.android.database  package,  as   this  chapter  uses  some 
tests implemented on the Database/Contacts sample project.

If you were to run this on your own project, substituting in your package 
name, with just the auto-generated test files, you should see results akin to:

com.commonsware.android.database.ContactsDemoTest:.
Test results for InstrumentationTestRunner=.
Time: 0.61

OK (1 test)

The first line will differ, based upon your package and the name of your 
project's initial activity, but the rest should be the same, showing that a 
single test was run, successfully.

Of course, this is only the beginning.

Erecting More Scaffolding

Here   is   the   source   code   for   the   test   case   that   Android   automatically 
generates for you:

package com.commonsware.android.database;

Subscribe to updates at http://commonsware.com

Special Creative Commons BY-SA 3.0 License Edition

226

Testing Your Patience

import android.test.ActivityInstrumentationTestCase;

/**
 * This is a simple framework for a test of an Application. See
 * {@link android.test.ApplicationTestCase ApplicationTestCase} for more 
information on
 * how to write and extend Application tests.
 * <p/>
 * To run this test, you can type:
 * adb shell am instrument -w \
 * -e class com.commonsware.android.database.ContactsDemoTest \
 * com.commonsware.android.database.tests/android.test.InstrumentationTestRunner
 */
public class ContactsDemoTest extends 
ActivityInstrumentationTestCase<ContactsDemo> {

 public ContactsDemoTest() {
 super("com.commonsware.android.database", ContactsDemo.class);
 }

}

As  you  can  see,   there  are   no  actual   test   methods.   Instead,  we   have  an 
ActivityInstrumentationTestCase  implementation   named  ContactsDemoTest. 
The class name was generated by adding Test to the end of the main activity 
(ContactsDemo) of the project.

In the next section, we will examine ActivityInstrumentationTestCase more 
closely  and  see   how  you  can  use   it   to,  as   the   name  suggests,   test  your 
activities.

However, you are welcome to create ordinary JUnit test cases in Android – 
after all, this is just JUnit, merely augmented by Android. So, you can create 
classes like this:

package com.commonsware.android.database;

import junit.framework.TestCase;

public class SillyTest extends TestCase {
  protected void setUp() throws Exception {
    super.setUp();
    
    // do initialization here, run on every test method
  }
  
  protected void tearDown() throws Exception {

227

Subscribe to updates at http://commonsware.com

Special Creative Commons BY-SA 3.0 License Edition

Testing Your Patience

    // do termination here, run on every test method

    super.tearDown();
  }
  
  public void testNonsense() {
    assertTrue(1==1);
  }
}

There is nothing Android-specific in this test case. It  is simply standard 
JUnit, albeit a bit silly.

You  can also create test  suites, to bundle  up sets  of tests for execution. 
Here,   though,   if  you  want,  you  can   take  advantage  of  a   bit  of   Android 
magic: TestSuiteBuilder. TestSuiteBuilder uses reflection to find test cases 
that need to be run, as shown below:

package com.commonsware.android.database;

import android.test.suitebuilder.TestSuiteBuilder;
import junit.framework.Test;
import junit.framework.TestSuite;

public class FullSuite extends TestSuite {
  public static Test suite() {
    return(new TestSuiteBuilder(FullSuite.class)
                .includeAllPackagesUnderHere()
                .build());
  }
}

Here, we  are  telling Android to find  all test  cases  located  in  FullSuite's 
package   (com.commonsware.android.database)  and  all   sub-packages,  and   to 
build a TestSuite out of those contents.

A test suite may or may not be necessary for you. The command shown 
above to execute tests will execute any test cases it can find for the package 
specified on the command line. If you want to limit the scope of a test run, 
though, you can use the -e switch to specify a test case or suite to run:

adb shell am instrument -e class 
com.commonsware.android.database.ContactsDemoTest -w 
com.commonsware.android.database.tests/android.test.InstrumentationTestRunner

Subscribe to updates at http://commonsware.com

Special Creative Commons BY-SA 3.0 License Edition

228

Testing Your Patience

Here, we indicate we only want to run  ContactsDemoTest, not all test cases 
found in the package.

Testing Real Stuff

While ordinary JUnit tests are certainly helpful, they are still fairly limited, 
since much of your application logic may be tied up in activities, services, 
and the like.

To   that   end,   Android   has   a   series   of  TestCase  classes   you   can   extend 
designed specifically to assist in testing these sorts of components.

ActivityInstrumentationTestCase

The   test   case   created   by   Android's   SDK   tools,  ContactsDemoTest  in   our 
example,   is   an  ActivityInstrumentationTestCase.   This   class   will   run  your 
activity for you, giving you access to the Activity object itself. You can then:

• Access your widgets

•

•

Invoke public and package-private methods (more on this below)

Simulate key events

Of   course,   the   automatically-generated  ActivityInstrumentationTestCase 
does none of that, since it does not know much about your activity. Below 
you will find an augmented version of ContactsDemoTest that does a little bit 
more:

package com.commonsware.android.database;

import android.test.ActivityInstrumentationTestCase;
import android.widget.ListView;
import android.widget.Spinner;

public class ContactsDemoTest
  extends ActivityInstrumentationTestCase<ContactsDemo> {
  private ListView list=null;
  private Spinner spinner=null;
  
  public ContactsDemoTest() {

229

Subscribe to updates at http://commonsware.com

Special Creative Commons BY-SA 3.0 License Edition

Testing Your Patience

    super("com.commonsware.android.database",
          ContactsDemo.class);
  }

  @Override
  protected void setUp() throws Exception {
    super.setUp();
    
    ContactsDemo activity=getActivity();
    
    list=(ListView)activity.findViewById(android.R.id.list);
    spinner=(Spinner)activity.findViewById(R.id.spinner);
  }
  
  public void testSpinnerCount() {
    assertTrue(spinner.getAdapter().getCount()==3);
  }
  
  public void testListDefaultCount() {
    assertTrue(list.getAdapter().getCount()>0);
  }
}

Here are the steps to making use of ActivityInstrumentationTestCase:

1. Extend   the   class   to   create   your   own   implementation.   Since 
ActivityInstrumentationTestCase is a generic, you need to supply the 
name
(e.g., 
ActivityInstrumentationTestCase<ContactsDemo>).

tested  

  being

 

activity

 

  of

 

the

2.

3.

4.

5.

In the constructor, when you  chain to the superclass, supply the 
name of the package of the activity plus the activity class itself. You 
can optionally supply a third parameter, a boolean indicating if the 
activity should be launched in touch mode or not.

In  setUp(), use  getActivity()  to get  your hands  on your  Activity 
object,   already   typecast   to   the   proper   type   (e.g.,  ContactsDemo) 
courtesy of our generic. You can also at this time access any widgets, 
since the activity is up and running by this point.

If needed, clean up stuff in  tearDown(), no different than with any 
other JUnit test case/

Implement test methods to exercise your activity. In this case, we 
simply confirm that the  Spinner  has three items in its drop-down 
list and there  is at least one contact loaded  into the  ListView  by 

Subscribe to updates at http://commonsware.com

Special Creative Commons BY-SA 3.0 License Edition

230

Testing Your Patience

default. You could, however, use sendKeys() and the like to simulate 
user input.

 

see

 

 

 

the

activity

actually

If you are looking at your emulator or device while this test is running, you 
will
launched   on-screen. 
ActivityInstrumentationTestCase creates a true running copy of the activity. 
This means you get access to everything you need; on the other hand, it 
does mean that the test case runs slowly, since the activity needs to be 
created and destroyed for each test method in the test case. If your activity 
does a lot on startup and/or shutdown, this may make running your tests a 
bit sluggish.

 

Note that your ActivityInstrumentationTestCase resides in the same package 
as the Activity it is testing – ContactsDemoTest and ContactsDemo are both in 
com.commonsware.android.database,
  allows 
ContactsDemoTest  to access both public and package-private methods and 
data   members.  ContactsDemoTest  still   cannot   access   private   methods, 
though. This allows  ActivityInstrumentationTestCase to behave in a white-
box   (or   at   least   gray-box)   fashion,   inspecting   the   insides   of   the   tested 
activities in addition to testing the public API.

  example.

  This

for

 

Now,   despite   the   fact   that   Android's   own   tools   create   an 
ActivityInstrumentationTestCase  subclass   for   you,   that   class   is   officially 
deprecated.   They   advise   using  ActivityInstrumentationTestCase2  instead, 
which offers the same basic functionality, with a few extras, such as being 
able to specify the  Intent  that is used to launch the activity being tested. 
This is good for testing search providers, for example.

AndroidTestCase

For tests that only need access to your application resources, you can skip 
some   of   the   overhead   of
 ActivityInstrumentationTestCase  and   use 
AndroidTestCase. In AndroidTestCase, you are given a Context and not much 
more, so anything you can reach from a Context is testable, but individual 
activities or services are not.

Subscribe to updates at http://commonsware.com

Special Creative Commons BY-SA 3.0 License Edition

231

Testing Your Patience

While this may seem somewhat useless, bear in mind that a lot of the static 
testing of your activities will come in the form of testing the layout: are the 
widgets identified properly, are they positioned properly, does the focus 
work, etc. As it turns out, none of that actually needs an Activity object – 
so long as you can get the inflated  View  hierarchy, you can perform those 
sorts of tests.

For   example,
ContactsDemoBaseTest:

  here  

is   an

 AndroidTestCase 

implementation, 

package com.commonsware.android.database;

import android.test.AndroidTestCase;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ListView;
import android.widget.Spinner;

public class ContactsDemoBaseTest extends AndroidTestCase {
  private ListView list=null;
  private Spinner spinner=null;
  private ViewGroup root=null;
  
  @Override
  protected void setUp() throws Exception {
    super.setUp();
    
    LayoutInflater inflater=LayoutInflater.from(getContext());
    
    root=(ViewGroup)inflater.inflate(R.layout.main, null);
    root.measure(480, 320);
    root.layout(0, 0, 480, 320);

    list=(ListView)root.findViewById(android.R.id.list);
    spinner=(Spinner)root.findViewById(R.id.spinner);
  }
  
  public void testExists() {
    assertNotNull(list);
    assertNotNull(spinner);
  }
  
  public void testRelativePosition() {
    assertTrue(list.getTop()>=spinner.getBottom());
    assertTrue(list.getLeft()==spinner.getLeft());
    assertTrue(list.getRight()==spinner.getRight());
  }
}

Subscribe to updates at http://commonsware.com

Special Creative Commons BY-SA 3.0 License Edition

232

Testing Your Patience

Most of the complicated work is performed in setUp():

1.

Inflate our layout using a  LayoutInflater  and the  Context  supplied 
by getContext()

2. Measure and lay out the widgets in the inflated View hierarchy – in 

this case, we lay them out on a 480x320 screen

3. Access the individual widgets to be tested

At that point, we can test static information on the widgets, but we cannot 
cause them to change very easily (e.g., we cannot simulate keypresses). In 
the case of  ContactsDemoBaseTest, we simply confirm the widgets exist and 
are laid out as expected. We could use  FocusFinder  to test whether focus 
changes from one widget to the next should work as expected. We could 
ensure our resources exist under their desired names, test to see if our fonts 
exist in our assets, or anything else we can accomplish with just a Context.

Since we are not creating and destroying activities with each test case, these 
tests should run substantially faster.

Other Alternatives

Android also offers various other test case base classes designed to assist in 
testing Android components, such as:

•

•

•

ServiceTestCase, used for testing services, as you might expect given 
the name

ActivityUnitTestCase,   a  TestCase  that   creates   the  Activity  (like 
ActivityInstrumentationTestCase), but does not fully connect it to 
the   environment,   so   you   can   supply   a   mock  Context,   a   mock 
Application, and other mock objects to test out various scenarios

ApplicationTestCase, for testing custom Application subclasses

Monkeying Around

Independent from the JUnit system is the Monkey.

233

Subscribe to updates at http://commonsware.com

Special Creative Commons BY-SA 3.0 License Edition

Testing Your Patience

The   Monkey   is   a   test   program   that   simulates   random   user   input.   It   is 
designed for "bash testing", confirming that no matter what the user does, 
the   application   will   not   crash.   The   application   may   have  odd   results   – 
random input entered into a Twitter client may, indeed, post that random 
input to Twitter. The Monkey does not test to make sure that results of 
random input make sense; it only tests to make sure random input does not 
blow up the program.

You can run the Monkey by setting up your initial starting point (e.g., the 
main activity in your application) on your device or emulator, then running 
a command like this:

adb shell monkey -p com.commonsware.android.database -v --throttle 100 600

Working   from   right   to   left,   we   are   asking   for   600   simulated   events, 
throttled to run every 100 milliseconds. We want to see a list of the invoked 
events   (-v)   and  we   want   to   throw   out   any   event   that   might   cause   the 
Monkey   to   leave   our   application,   as   determined   by   the   application's 
package (-p com.commonsware.android.database).

The   Monkey   will   simulate   keypresses   (both   QWERTY   and   specialized 
hardware   keys,   like   the   volume   controls),   D-pad/trackball   moves,   and 
sliding the keyboard open or closed. Note that the latter may cause your 
emulator  some  confusion,  as   the  emulator   itself  does   not   itself  actually 
rotate, so you may end up with your screen appearing in landscape while 
the emulator is still, itself, portrait. Just rotate the emulator a couple of 
times (e.g., <Ctrl>-<F12>) to clear up the problem.

For playing with a Monkey, the above command works fine. However, if 
you want to regularly test your application this way, you may need some 
measure of repeatability. After all, the particular set of input events that 
trigger   your   crash   may   not   come   up   all   that   often,   and   without   that 
repeatable scenario, it will be difficult to repair the bug, let alone test that 
the repair worked.

To deal with this, the Monkey offers the -s switch, where you provide a seed 
for the random number generator. By default, the Monkey creates its own 

Subscribe to updates at http://commonsware.com

Special Creative Commons BY-SA 3.0 License Edition

234

Testing Your Patience

seed,   giving   totally   random   results.   If   you   supply   the   seed,   while   the 
sequence of events is random, it is random for that seed – repeatedly using 
the same seed will give you the same events. If you can arrange to detect a 
crash and know what seed was used to create that crash, you may well be 
able to reproduce the crash.

There are many more Monkey options, to control the mix of event types, to 
generate   profiling   reports   as   tests   are   run,   and   so   on.   The  Monkey 
documentation in the SDK's Developer's Guide covers all of that and more.

Subscribe to updates at http://commonsware.com

Special Creative Commons BY-SA 3.0 License Edition

235

Subscribe to updates at http://commonsware.com

Special Creative Commons BY-SA 3.0 License Edition

Keyword Index

Class...............................................

ApplicationTestCase........................................233

AccelerateDecelerateInterpolator...................95

AccelerateInterpolator.....................................95

Activity.....16, 50, 124, 168-170, 179, 229, 230, 232, 
233

ActivityInstrumentationTestCase...227, 229-231, 
233

ActivityInstrumentationTestCase2.................231

ActivityUnitTestCase.......................................233

Adapter......................................30-32, 35, 36, 146

AdapterView.OnItemSelectedListener...........46

AlarmManager.......66, 168, 179, 180, 182, 183, 185

AlertDialog......................................................209

AlphaAnimation..............................87, 92-94, 97

AnalogClock......................................................50

AndroidTestCase......................................231, 232

Animation........................................87, 88, 94-96

AnimationListener......................................94, 95

AnimationSet........................................87, 96, 97

AnimationUtils.................................................94

Application......................................................233

AppService..................................182-185, 187, 188

AppWidgetHost................................................66

AppWidgetHostView.......................................66

AppWidgetManager..............................56, 61, 65

AppWidgetProvider........................55, 59, 64, 65

AsyncTask.........................................................119

AttributeSet.......................................................16

AudioService....................................................193

BaseColumns....................................................150

BatteryMonitor.........................................174, 176

BitmapDrawable..............................................120

BooleanSetting.................................................189

BroadcastReceiver.50-52, 55, 65, 66, 169-171, 173, 
181, 182, 185

BroadcastReciever.............................................55

BshService.................................................203, 211

BshServiceDemo.............................................205

Button.............21, 23, 24, 40, 50, 51, 58, 75, 76, 82

CallLog................................................150-152, 160

Subscribe to updates at http://commonsware.com

Special Creative Commons BY-SA 3.0 License Edition

237

Keyword Index

CallLog.Calls....................................................150

Drawable...............................23-26, 42, 71, 72, 193

CallPlusAdapter........................................158, 160

Drawable/GradientDemo.................................72

Camera......................................113-115, 117-119, 211

EditText..............................................................51

Camera.Parameters....................................115, 117

Exception..........................................................211

Camera.PictureCallback..................................119

ExecuteScriptJob...............................................211

Camera.ShutterCallback..................................118

FocusFinder.....................................................233

CharSequence..................................................198

FrameLayout.....................................................50

CheckBox................................................21, 25, 27

FullSuite...........................................................228

Chronometer.....................................................50

GeoWebOne........................................................2

ComponentName.......................56, 200, 221, 222

HeaderFooterDemo..........................................38

ConstantsInstaller............................................141

I_JoinHandler............................................156, 157

Contacts.............................................142, 143, 150

IBinder.............................................................200

Contacts.ContactMethodsColumns...............149

ImageButton...............13, 14, 19, 50, 51, 55, 58, 95

Contacts.PeopleColumns.........................148, 149

ImageView..................................................50, 173

Contacts.Phones..............................................148

InputStream......................................................141

Contacts.PhonesColumns...............................148

InstrumentationTestRunner..........................226

ContactsDemo....................143, 147, 227, 230, 231

ContactsDemoBaseTest...........................232, 233

ContactsDemoTest...........................227, 229, 231

ContentProvider........................................151, 168

ContentValues..................................................157

Context..............16, 94, 124, 130, 170, 179, 231, 233

Cursor..............................31, 150-153, 156, 157, 160

CursorAdapter.................................................158

CursorJoiner......................................................151

CursorWrapper..........................................151, 152

CycleInterpolator........................................94, 96

DatabaseInstaller......................................140-142

DeadObjectException.....................................201

DecelerateInterpolator.....................................95

Intent xii, 55, 60, 61, 66, 167-171, 173-175, 179, 180, 
182, 185, 191, 200, 206, 220-222, 231

IntentService........................................56, 66, 185

Interpolator.................................................95, 96

IScript..............................................203, 206, 208

IScriptResult.....................................208, 209, 213

JoinCache..........................................................157

JoinCursor.....................................151-153, 156-158

JoinDemo....................................150, 157, 158, 160

LayoutInflater............................................58, 233

LinearInterpolator............................................95

LinearLayout..............................15, 38, 50, 89, 90

LinkedBlockingQueue.....................................211

LinkedHashMap...............................................157

List.......................................................35, 198, 222

Subscribe to updates at http://commonsware.com

Special Creative Commons BY-SA 3.0 License Edition

238

Keyword Index

ListActivity..............................32, 36, 43, 143, 160

RelativeLayout..................................................50

ListView.29-32, 36, 38, 42, 43, 46, 57, 72, 74, 143, 
144, 160, 230

Locater.................................................................4

LocationListener.............................................4, 8

LocationManager................................................4

Map...................................................................198

Media/Audio.....................................................101

MediaPlayer................................100, 101, 104, 105

Menu..........................................................94, 220

Menu.Item........................................................221

Meter................................13-16, 18, 19, 21, 193, 195

MeterDemo........................................................21

MyActivity........................................................221

NinePatchDemo................................................82

NoteActivity.....................................................164

NoteEditor.......................................................164

OnAlarmReceiver.....................................182-184

OnBootCompleted..........................................169

OnBootReceiver........................................169, 181

OnClickListener.................................................51

OnWiFiChangeReceiver...................................171

PackageManager.............................................222

Parcelable.........................................................198

PendingIntent................................51, 58, 179, 182

PhotoCallback..................................................120

PictureDemo.............................................118, 120

PowerManager..........................................180, 183

PreferenceActivity......................................58, 60

PreviewDemo.............................................112, 113

ProgressBar...............................13, 14, 50, 173, 176

RemoteException.............................................201

RemoteService.................................................203

RemoteViews...............................50, 51, 55-59, 61

RotateAnimation........................................87, 94

SavePhotoTask..........................................119, 120

ScaleAnimation.................................................87

ScrollView........................................................128

Section...............................................................35

SectionedAdapter..................................32, 35, 36

SectionedDemo...........................................32, 36

SeekBar.........................................................13, 82

SelectorAdapter................................................46

SelectorDemo..............................................43, 46

SelectorWrapper...............................................46

Sensor...............................................................125

SensorEvent......................................................125

SensorEventListener.................................125, 127

SensorManager..................................124, 125, 130

Service........................50-52, 56, 66, 168, 179, 199

ServiceConnection...................................200, 201

ServiceTestCase...............................................233

Settings......................................................188, 191

Settings.Secure.........................................188, 192

Settings.System.................................188, 189, 192

SettingsSetter....................................188, 190, 192

Shaker.........................................................129-131

Shaker.Callback................................................131

ShakerDemo..............................................129, 131

SharedPreferences............................................58

Subscribe to updates at http://commonsware.com

Special Creative Commons BY-SA 3.0 License Edition

239

Keyword Index

SimpleCursorAdapter....................31, 32, 146, 149

ViewFlipper.......................................................88

SlidingPanel....................................90, 92, 94-96

ViewWrapper...................................................158

SlidingPanelDemo.............................................91

VolumeManager...............................................195

Spinner.......................................143, 144, 146, 230

Volumizer..................................................193, 195

SQLiteDatabase................................................141

WakefulIntentService........................183, 185, 187

SQLiteOpenHelper............................137, 140, 141

WakeLock...........................................180, 183-185

String................................................................198

WebSettings.........................................................1

SurfaceHolder.............................................113, 114

WebView.........................................1, 2, 4, 7, 9, 10

SurfaceHolder.Callback.............................114, 115

WebViewClient....................................................1

SurfaceView.................................................113-115

WidgetProvider.................................................61

TestCase....................................................229, 233

TestSuite..........................................................228

TestSuiteBuilder..............................................228

TextSwitcher......................................................88

TextView. .27, 40, 43, 46, 50, 55, 58, 126, 128, 129, 
173, 176

Thread..............................................................184

Command......................................

adb push...........................................................107

draw9patch............................................78, 79, 83

mksdcard..........................................................107

sqlite3..................................................137, 139, 141

Toast.........................................................207, 209

Constant.........................................

TranslateAnimation.............87-90, 92, 93, 95, 97

ACTION_PICK..........................................216, 217

TranslationAnimation......................................94

ACTION_TAG..................................................220

TwitterWidget..................................54-56, 64-66

ACTION_VIEW................................................217

TWPrefs.......................................................58, 59

ALTERNATIVE.................................................221

TypedArray....................................................16, 17

BIND_AUTO_CREATE....................................201

UpdateService..............................................56, 57

CATEGORY_ALTERNATIVE...................220, 221

Uri..........................................99, 100, 215-217, 221

DEFAULT_CATEGORY....................................221

VideoDemo......................................................107

MATCH_DEFAULT_ONLY..............................221

VideoView.................................................105, 106

RESULT_OK..............................................216, 217

View. .30-32, 35, 36, 38, 40, 42, 43, 46, 49, 50, 57, 
58, 66, 88, 94, 232, 233

Method...........................................

View.OnClickListener.......................................18

acquire()...........................................................184

ViewAnimator...................................................88

acquireStaticLock()..................................183, 185

Subscribe to updates at http://commonsware.com

Special Creative Commons BY-SA 3.0 License Edition

240

Keyword Index

addFooterView()...............................................38

getPackageManager().....................................222

addHeaderView()..............................................38

getSystemService()............................124, 179, 182

addIntentOptions().................................220-222

getView()......................................................32, 35

addJavascriptInterface().............................2, 4, 6

getViewTypeCount()...................................35, 36

addSection()......................................................35

handleInstallError().........................................141

areAllItemsSelectable()....................................30

initMeter()........................................................195

bindService()....................................200-202, 206

insert()..............................................................135

buildFooter().....................................................40

isEnabled()........................................................30

buildHeader()...................................................40

isNull()..............................................................156

buildUpdate()..............................................56, 57

loadAnimation()...............................................94

create().............................................................104

loadUrl()..........................................................7, 9

delete()..............................................................135

obtainStyledAttributes()...................................16

doInBackground()...........................................120

onAccuracyChanged().....................................125

enable()............................................................199

onActivityResult()...........................................216

eval()..........................................................207, 211

onAnimationEnd()...........................................94

execSQL()..................................................141, 142

onBind()...........................................................199

executeScript().................................207, 208, 210

onClick()............................................................19

failure()............................................................209

onCreate().....................104, 114, 141, 184, 185, 195

findViewById()..................................................57

onDeleted().................................................65, 66

getActivity().....................................................230

onDestroy()................................................60, 125

getColumnCount()..........................................156

onDisabled()......................................................65

getColumnIndex()...........................................156

onEnabled().......................................................65

getContext().....................................................233

onFinishInflate()...........................................16, 17

getCount().........................................................35

onHandleIntent()...............................56, 185, 187

getHolder().......................................................114

onItemSelected()..............................................46

getInt()........................................................16, 156

onKeyDown()........................................60, 61, 117

getItem()............................................................35

onLocationChanged()........................................8

getItemViewType()......................................35, 36

onNothingSelected()........................................46

getJoin().....................................................157, 158

onPause().........................................................174

getLock()..........................................................183

onPictureTaken().............................................119

Subscribe to updates at http://commonsware.com

Special Creative Commons BY-SA 3.0 License Edition

241

Keyword Index

onReceive()............................65, 66, 170, 182, 185

setPreviewDisplay().........................................114

onResume()......................................................174

setProgress()....................................................195

onSensorChanged().........................................125

setRepeating()..................................................182

onServiceConnected().............................200, 201

setResult()..........................................................61

onServiceDisconnected()........................200, 201

setTextViewText().............................................58

onStart()....................................................184, 185

setType()...........................................................114

onUpdate()............................................55, 64, 65

setup().......................................................104, 105

onUpgrade().....................................................141

setUp()......................................................230, 233

open()................................................................113

setVisibility()..............................................89, 94

pause().......................................................101, 104

shakingStarted()...............................................131

play()................................................................104

shakingStopped().............................................131

prepare()....................................................101, 104

start()................................................................101

prepareAsync().................................................101

startActivityForResult().............................59, 216

query()..............................................................135

startAnimation().........................................88, 92

queryIntentActivityOptions()........................222

startPreview()...................................................115

recycle()..............................................................17

startService().......................................56, 170, 185

registerListener().............................................125

steerLeft().........................................................128

registerReceiver()........................168, 169, 171, 173

steerRight()......................................................128

release()...............................................105, 115, 183

stop()..................................................101, 104, 105

requery()....................................................157, 158

stopPreview()....................................................115

runOnUiThread()...........................................209

success()..........................................................209

sendKeys()........................................................231

surfaceChanged().............................................115

setAnimationListener()....................................94

surfaceCreated()...............................................114

setDataSource()...............................................100

surfaceDestroyed()...........................................115

setDuration()....................................................92

takePicture().....................................................118

setInterpolator()...............................................96

tearDown()......................................................230

setMax()...........................................................195

toggle()..............................................................90

setOnClickPendingIntent()..............................58

toString().........................................................207

setOnItemSelectedListener()...........................43

unbindService()...............................................201

setPictureFormat()...........................................117

unregisterListener().........................................125

Subscribe to updates at http://commonsware.com

Special Creative Commons BY-SA 3.0 License Edition

242

Keyword Index

update()............................................................135

updateAppWidget()..............................56, 61, 65

Subscribe to updates at http://commonsware.com

Special Creative Commons BY-SA 3.0 License Edition

243

